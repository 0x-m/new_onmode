const menuItemTemplateHTML="",menuGroupTemplateText="",listMenuTemplateText="";class MenuItem extends HTMLElement{static get observedAttributes(){return["caption","link"]}get caption(){return this._caption}get link(){return this._link}set link(t){this.setAttribute("link",t)}set caption(t){this.setAttribute("caption",t)}constructor(){super(),this.attachShadow({mode:"open"});const t=document.createElement("template");t.innerHTML='\n            <style>\n                :host {\n                    cursor: pointer;\n                }\n                #caption {\n                    font-size: 0.6rem;\n                    padding: 0.8rem;\n                    cursor: pointer;\n                    display: block;\n                    transition: 0.5s all;\n                    text-decoration: none;\n                    border-bottom: 1px solid #0000ef;\n                }\n                #caption:hover {\n                    background-color: rgba(240,240,240,0.5);\n                }\n            </style>\n\n            <a href="" id="caption"></a>\n        ',this.shadowRoot.appendChild(t.content.cloneNode(!0)),this._caption=this.shadowRoot.querySelector("#caption")}attributeChangedCallback(t,e,n){if(n!==e)switch(t){case"caption":this._caption.textContent=n;break;case"link":this._caption.href=n;default:return}}}class MenuItemGroup extends HTMLElement{static get observedAttributes(){return["caption","show"]}get show(){return this.hasAttribute("show")}set show(t){Boolean(t);t?this.setAttribute("show"):this.removeAttribute("show")}get caption(){return this.hasAttribute("caption")?this.getAttribute("caption"):void 0}set caption(t){t?this.setAttribute("caption",t):this.removeAttribute("caption")}constructor(){super(),this.attachShadow({mode:"open"});const t=document.createElement("template");t.innerHTML='\n            <style>\n                :host {\n                    cursor: pointer;\n                    display:block;\n                }\n               \n                #container {\n                    display: flex;\n                    flex-direction: column;\n                  \n                }\n              \n                #items {\n                    display: none;\n                    flex-direction:column\n                }\n                #caption {\n                    padding: 0.8rem;\n                    font-size: 0.6rem;\n                    user-select: none;\n                    pointer-events: none;\n                    display: block;\n                    flex: 90%;\n                }\n               \n              \n                #header {\n                    display: flex;\n                    align-items: center;\n                    transition: 0.5s all;\n                    border-bottom: 1px solid #efefef;\n                }\n                #header:hover {\n                    background-color: rgba(240,240,240,0.5) !important;\n                    \n                }\n                #arrow {\n                    font-size: 0.6rem;\n                   \n                    padding: 0.4rem;\n                }\n            </style>\n\n            <div id="header">\n                <span id="caption"></span>\n                <span id="arrow">&#10095;</span>\n            </div>\n            \n\n            <div id="container">\n                <section id="items">\n                    <slot></slot>\n                </section>\n            </div>\n        \n        ',this.shadowRoot.appendChild(t.content.cloneNode(!0)),this._caption=this.shadowRoot.querySelector("#caption")}_toggleShow(){const t=this.shadowRoot.querySelector("#items");t.style.display="none"==t.style.display?"flex":"none"}attributeChangedCallback(t,e,n){if(n!==e)switch(t){case"caption":this._caption.textContent=n;break;case"show":this.querySelector("#items");default:return}}}class ListMenu extends HTMLElement{static get observedAttributes(){return["caption"]}get caption(){return this.getAttribute("caption")}set caption(t){return this.setAttribute("caption",t)}constructor(){super();const t=document.createElement("template");t.innerHTML='\n            <style>\n                #container {\n                    display: flex;\n                    flex-direction: column;\n                    \n                }\n                #main {\n                    display: flex;\n                    flex-direction: column;\n                    transform-origin: center center;\n                }\n                #caption {\n                    flex: 80%;\n                    color: blue;\n                    font-size: 0.6rem;\n                    display: block;\n                    \n                    margin: 2px;\n                    cursor: pointer;\n                    padding: 0.6rem;\n                }\n                #header:hover {\n                    background-color: rgba(240,240,240,0.5);\n\n                }\n                #header{\n                    display: flex;\n                    align-items: center;\n                    justify-content: space-between;\n                    border-bottom: 1px solid #efefef;\n                    user-select: none;\n                    display: none;\n                }\n              #arrow{\n                  font-size: 0.7rem;\n                  color: gray;\n                  pointer-events: none;\n                  padding: 0.4rem\n              }\n            </style>\n            \n            <div id="container">\n                <div id="header">\n                    <span id="caption"></span>\n                    <span id="arrow">&#10095;</span>\n                </div>\n                <section id="main">\n                    <slot></slot>\n                </section>\n            </div>\n        ',this.attachShadow({mode:"open"}),this.shadowRoot.appendChild(t.content.cloneNode(!0)),this._history=new Array,document.createElement("div").innerHTML=this.innerHTML,this._main=this.shadowRoot.querySelector("#main"),this._caption=this.shadowRoot.querySelector("#caption"),this._prevMenu=this._prevMenu.bind(this),this._updateView=this._updateView.bind(this),this.addEventListener("click",this._handleClick),this._caption.addEventListener("click",this._prevMenu),this._default_header=void 0}connecteCallback(){}attributeChangedCallback(t,e,n){"caption"==t&&(null==this._default_header&&(this._default_header=n),this._caption.textContent=n,console.log("list menu caption changed"))}_allGroups(){return Array.from(this.querySelector("menu-group"))}_updateView(t){this.shadowRoot.querySelector("#main").animate([{transform:"translateX(100px)"},{transform:"translateX(0)"}],{duration:300,easing:"ease-in-out"});const e=document.createElement("menu-group");e.setAttribute("caption",this.caption),e.innerHTML=this.innerHTML,this._history.push(e),this.innerHTML=t.innerHTML,this.setAttribute("caption","بازگشت"),this._history.length>=1&&(this.shadowRoot.querySelector("#header").style.display="flex")}_handleClick(t){console.log("handle click----------"),console.log(t.target.tagName),"menu-group"==t.target.tagName.toLowerCase()&&this._updateView(t.target)}_prevMenu(){const t=this._history.length;if(t>0){this.shadowRoot.querySelector("#main").animate([{transform:"translateX(-100px)"},{transform:"translateX(0)"}],{duration:300,easing:"ease-in-out"});const e=this._history.pop();console.log(e),this.innerHTML=e.innerHTML,1==t&&(this.shadowRoot.querySelector("#header").style.display="none")}}}customElements.define("menu-item",MenuItem),customElements.define("menu-group",MenuItemGroup),customElements.define("list-menu",ListMenu);